<apex:page showHeader="false" sidebar="false" standardStylesheets="false" docType="html-5.0" language="en-US" applyHTMLTag="false" applyBodyTag="false">
    <head>
        <meta charset="utf-8"></meta>
        <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width"></meta>
        <!-- styling -->
        <apex:stylesheet value="{!URLFOR($Resource.nvd3, 'build/nv.d3.css')}"></apex:stylesheet>
        <!-- end -->
        <apex:stylesheet value="{!URLFOR($Resource.bootstrap, 'dist/css/bootstrap.css')}"></apex:stylesheet>
    <style type="text/css">
      body {
        padding-top: 43px;
      }
      .statement_para {
          font-size: 14pt;
          line-height: 120%;
          width: 60%;
          text-align: justify;
          text-justify: distribute;
          margin: 10px auto;
          margin-bottom: 30px;
      }

      .row {
        margin 1%;
      }

      article {
        padding: 0 1%;
        font-size: 18px;
        line-height: 1.5em;
      }

      body > .container {
        width: 941px;
      }

      @media(min-width: 1200px){
        body > .container {
          width: 1171px;
        }
      }

      @media (max-width: 979px) and (min-width: 768px) {
        body > .container {
          width: 725px;
        }
      }

    </style>
    </head>

        <body>
    <div class='container-fluid with-3d-shadow with-transitions'>
        <div class="row">
        <div class="span6">
          <svg id="mainExample" style="height:360px"></svg>
        </div>
        </div>
        <div class="row">
        <div class="col-xs-4">
          <svg id="exampleOne" style="height:240px"></svg>
        </div>
        <div class="col-xs-4">
          <svg id="exampleTwo" style="height:240px"></svg>
        </div>
        <div class="col-xs-4">
          <svg id="exampleThree" style="height:240px"></svg>
        </div>
      </div>
        </div>
        <script>

    

        (function() {

          var mainExample, exampleOne, exampleTwo, exampleThree;

          //var colors = d3.scale.category20().range();

          var test_data = stream_layers(3,20 + Math.random()*50,.1).map(function(data, i) {
            return {
              key: 'Stream' + i
            , values: data
            //, color: colors[i]
            };
          });


          // --------------------------- MAIN EXAMPLE ---------------------------------


          nv.addGraph(function() {
            var chart = nv.models.multiBarChart()
                          .margin({top: 50, bottom: 30, left: 40, right: 10});

            chart.xAxis
                .tickFormat(d3.format(',f'));

            chart.yAxis
                .tickFormat(d3.format(',.1f'));

            d3.select('#mainExample')
                .datum(test_data)
              .transition().duration(500).call(chart);

            nv.utils.windowResize(chart.update);

            chart.legend.dispatch.on('legendClick.updateExamples', function() {
              setTimeout(function() {
                exampleOne.update();
                exampleTwo.update();
                exampleThree.update();
              }, 100);
            });

            mainExample = chart;

            return chart;
          });



          // --------------------------- EXAMPLE ONE ---------------------------------


          nv.addGraph(function() {  
            var chart = nv.models.lineChart()
                          .showLegend(false)
                          .margin({top: 10, bottom: 30, left: 40, right: 10})
                          .useInteractiveGuideline(true)
                          ;

            chart.xAxis // chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the partent chart, so need to chain separately
                .tickFormat(d3.format(',r'));

            chart.yAxis
                .tickFormat(d3.format(',.1f'));

            d3.select('#exampleOne')
                .datum(test_data)
              .transition().duration(500)
                .call(chart);

            //TODO: Figure out a good way to do this automatically
            nv.utils.windowResize(chart.update);
            //nv.utils.windowResize(function() { d3.select('#chart1 svg').call(chart) });

            exampleOne = chart;

            return chart;
          });


          // --------------------------- EXAMPLE TWO ---------------------------------



          nv.addGraph(function() {
              var chart = nv.models.stackedAreaChart()
                          .margin({top: 10, bottom: 30, left: 40, right: 10})
                          .showControls(false)
                          .showLegend(false)
                          .useInteractiveGuideline(true)
                          .style('stream');

              chart.yAxis
                  .showMaxMin(false)
                  .tickFormat(d3.format(',.1f'));

              d3.select("#exampleTwo")
                .datum(test_data)
                  .transition().duration(500).call(chart);

              nv.utils.windowResize(chart.update);


              chart.stacked.dispatch.on('areaClick.updateExamples', function(e) {
                setTimeout(function() {
                  mainExample.update();
                  exampleOne.update();
                  //exampleTwo.update();
                  exampleThree.update();
                }, 100);
              })

              exampleTwo = chart;

              return chart;
          });



          // --------------------------- EXAMPLE THREE ---------------------------------


          nv.addGraph(function() {
              var chart = nv.models.stackedAreaChart()
                          .margin({top: 10, bottom: 30, left: 40, right: 10})
                          .showControls(false)
                          .showLegend(false)
                          .useInteractiveGuideline(true)
                          .style('stacked');

              chart.yAxis
                  .tickFormat(d3.format(',.1f'));

              d3.select("#exampleThree")
                .datum(test_data)
                  .transition().duration(500).call(chart);

              nv.utils.windowResize(chart.update);


              chart.stacked.dispatch.on('areaClick.updateExamples', function(e) {
                setTimeout(function() {
                  mainExample.update();
                  exampleOne.update();
                  exampleTwo.update();
                  //exampleThree.update();
                }, 100);
              })

              exampleThree = chart;

              return chart;
          });


        })();


    function stream_layers(n, m, o) {
  if (arguments.length < 3) o = 0;
  function bump(a) {
    var x = 1 / (.1 + Math.random()),
        y = 2 * Math.random() - .5,
        z = 10 / (.1 + Math.random());
    for (var i = 0; i < m; i++) {
      var w = (i / m - y) * z;
      a[i] += x * Math.exp(-w * w);
    }
  }
  return d3.range(n).map(function() {
      var a = [], i;
      for (i = 0; i < m; i++) a[i] = o + o * Math.random();
      for (i = 0; i < 5; i++) bump(a);
      return a.map(stream_index);
    });
}

/* Another layer generator using gamma distributions. */
function stream_waves(n, m) {
  return d3.range(n).map(function(i) {
    return d3.range(m).map(function(j) {
        var x = 20 * j / m - i / 3;
        return 2 * x * Math.exp(-.5 * x);
      }).map(stream_index);
    });
}

function stream_index(d, i) {
  return {x: i, y: Math.max(0, d)};
}


</script>
    <apex:includescript value="{!URLFOR($Resource.d3, 'd3.min.js')}"></apex:includescript>
    <apex:includescript value="{!URLFOR($Resource.nvd3, 'build/nv.d3.js')}"></apex:includescript>
    </body>
</apex:page>